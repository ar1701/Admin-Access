<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Faculty List</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      * {
        font-family: "Poppins", sans-serif;
        box-sizing: border-box;
      }

      body {
        background: linear-gradient(
          135deg,
          #4158d0 0%,
          #c850c0 46%,
          #ffcc70 100%
        );
        min-height: 100vh;
        margin: 0;
        padding: 0;
      }

      .navbar {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(20px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        padding: 0.8rem 0;
        position: sticky;
        top: 0;
        z-index: 1000;
        transition: all 0.3s ease;
      }

      .navbar:hover {
        background: rgba(255, 255, 255, 0.2);
      }

      .nav-links {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1.5rem;
        display: flex;
        gap: 2.5rem;
        align-items: center;
      }

      .nav-links a {
        color: rgba(255, 255, 255, 0.9);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
        position: relative;
        padding: 0.5rem 0;
      }

      .nav-links a:after {
        content: "";
        position: absolute;
        width: 0;
        height: 2px;
        bottom: 0;
        left: 0;
        background-color: white;
        transition: width 0.3s ease;
      }

      .nav-links a:hover {
        color: white;
        transform: translateY(-2px);
      }

      .nav-links a:hover:after {
        width: 100%;
      }

      .container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1.5rem;
      }

      h1 {
        color: white;
        font-weight: 600;
        margin-bottom: 2rem;
        text-align: center;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        position: relative;
        padding-bottom: 1rem;
      }

      h1:after {
        content: "";
        position: absolute;
        width: 80px;
        height: 4px;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        background: white;
        border-radius: 4px;
      }

      .search-container {
        margin-bottom: 2rem;
        position: relative;
      }

      #searchInput {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 16px;
        background: rgba(255, 255, 255, 0.95);
        padding-right: 50px;
        transition: all 0.3s ease;
        font-size: 1rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
      }

      #searchInput:focus {
        border-color: white;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        outline: none;
      }

      .search-icon {
        position: absolute;
        right: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: #94a3b8;
        transition: all 0.3s ease;
      }

      #searchInput:focus + .search-icon {
        color: #4158d0;
      }

      .table-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 24px;
        box-shadow: 0 15px 45px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
        padding: 2rem;
        overflow-x: auto;
        transition: transform 0.4s ease, box-shadow 0.4s ease;
        transform: translateY(0);
      }

      .table-container:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
      }

      .faculty-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
      }

      .faculty-table th,
      .faculty-table td {
        padding: 1.2rem 1rem;
        text-align: left;
      }

      .faculty-table th {
        background-color: #f8fafc;
        color: #475569;
        font-weight: 600;
        position: sticky;
        top: 0;
        z-index: 10;
        border-bottom: 2px solid #e2e8f0;
      }

      .faculty-table th:first-child {
        border-top-left-radius: 12px;
      }

      .faculty-table th:last-child {
        border-top-right-radius: 12px;
      }

      .faculty-table tr {
        transition: all 0.3s ease;
        border-bottom: 1px solid #f1f5f9;
      }

      .faculty-table tbody tr:last-child {
        border-bottom: none;
      }

      .faculty-table tr:hover {
        background-color: #f8fafc;
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
      }

      .actions {
        display: flex;
        gap: 0.8rem;
      }

      .edit-btn,
      .delete-btn {
        padding: 10px 18px;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
      }

      .edit-btn {
        background: linear-gradient(135deg, #4158d0 0%, #6366f1 100%);
        color: white;
      }

      .delete-btn {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
      }

      .edit-btn:hover,
      .delete-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .edit-btn:active,
      .delete-btn:active {
        transform: translateY(0);
      }

      .no-results {
        text-align: center;
        color: #64748b;
        padding: 3rem;
        font-size: 1.1rem;
      }

      /* Status indicator */
      .status-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 8px;
      }

      .status-active {
        background-color: #10b981;
        box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
      }

      /* Shimmer effect for loading */
      @keyframes shimmer {
        0% {
          background-position: -1000px 0;
        }
        100% {
          background-position: 1000px 0;
        }
      }

      .shimmer {
        animation: shimmer 2s infinite linear;
        background: linear-gradient(
          to right,
          #f6f7f8 0%,
          #edeef1 20%,
          #f6f7f8 40%,
          #f6f7f8 100%
        );
        background-size: 1000px 100%;
      }

      /* Responsive design */
      @media (max-width: 992px) {
        .actions {
          flex-direction: column;
          gap: 0.5rem;
        }

        .edit-btn,
        .delete-btn {
          width: 100%;
          justify-content: center;
        }
      }

      @media (max-width: 768px) {
        .table-container {
          padding: 1rem;
          border-radius: 16px;
        }

        .faculty-table th,
        .faculty-table td {
          padding: 1rem 0.5rem;
        }

        h1 {
          font-size: 1.5rem;
        }

        .nav-links {
          gap: 1rem;
          flex-wrap: wrap;
          justify-content: center;
        }
      }

      /* Filter badge */
      .filter-badge {
        display: inline-block;
        background: rgba(65, 88, 208, 0.1);
        border: 1px solid rgba(65, 88, 208, 0.2);
        color: #4158d0;
        padding: 0.3rem 0.8rem;
        border-radius: 50px;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .filter-badge:hover {
        background: rgba(65, 88, 208, 0.2);
      }

      .filter-badge.active {
        background: #4158d0;
        color: white;
      }

      .filter-container {
        margin-bottom: 1.5rem;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
      }

      .filter-label {
        color: white;
        margin-right: 1rem;
        font-weight: 500;
      }
    </style>
  </head>
  <body>
    <nav class="navbar">
      <div class="nav-links">
        <a href="/" class="logo-link">
          <img
            src="/images/cusat_logo.webp"
            alt="Logo"
            style="
              height: 45px;
              margin-right: 1rem;
              transition: transform 0.3s ease;
            "
            onmouseover="this.style.transform='scale(1.05)'"
            onmouseout="this.style.transform='scale(1)'"
          />
        </a>
        <a href="/add-faculty"
          ><i class="fas fa-user-plus me-2"></i>Add Faculty</a
        >
        <a href="/list-faculty" class="active"
          ><i class="fas fa-list me-2"></i>List Faculty</a
        >
        <a href="/dashboard"><i class="fas fa-chart-line me-2"></i>Dashboard</a>
      </div>
    </nav>

    <div class="container">
      <h1><i class="fas fa-users me-2"></i>Faculty Members</h1>

      <div class="search-container">
        <input
          type="text"
          id="searchInput"
          placeholder="Search by name, department, or designation..."
        />
        <i class="fas fa-search search-icon"></i>
      </div>

      <div class="filter-container">
        <span class="filter-label">Filter by Department:</span>
        <span class="filter-badge all active" data-filter="all">All</span>
        <% ['CSE', 'IT', 'SFE', 'CE', 'ME', 'EEE', 'EC'].forEach(dept => { %>
        <span class="filter-badge" data-filter="<%= dept %>"><%= dept %></span>
        <% }) %>
      </div>

      <div class="table-container">
        <table class="faculty-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Department</th>
              <th>Designation</th>
              <th>Access Code</th>
              <th>Phone Number</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="facultyTableBody">
            <% faculties.forEach(faculty => { %>
            <tr
              data-id="<%= faculty._id %>"
              data-department="<%= faculty.department %>"
            >
              <td>
                <span class="status-indicator status-active"></span>
                <%= faculty.name %>
              </td>
              <td><%= faculty.department %></td>
              <td><%= faculty.designation %></td>
              <td><%= faculty.accessCode %></td>
              <td><%= faculty.phone %></td>
              <td class="actions">
                <button class="edit-btn" onclick="editFaculty(this)">
                  <i class="fas fa-edit"></i> Edit
                </button>
                <button
                  class="delete-btn"
                  onclick="deleteFaculty('<%= faculty._id %>', this)"
                >
                  <i class="fas fa-trash"></i> Delete
                </button>
              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
        <div id="noResults" class="no-results" style="display: none">
          <i class="fas fa-search me-2"></i> No faculty members found matching
          your search.
        </div>
      </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      // Enhanced search functionality
      document
        .getElementById("searchInput")
        .addEventListener("input", function (e) {
          const searchTerm = e.target.value.toLowerCase();
          const rows = document.querySelectorAll("#facultyTableBody tr");
          let hasResults = false;

          rows.forEach((row) => {
            const name = row.children[0].textContent.toLowerCase();
            const department = row.children[1].textContent.toLowerCase();
            const designation = row.children[2].textContent.toLowerCase();

            // Check if the current active filter should be applied
            const activeFilter = document.querySelector(".filter-badge.active")
              .dataset.filter;
            const departmentMatch =
              activeFilter === "all" || row.dataset.department === activeFilter;

            // Search across multiple columns
            if (
              (name.includes(searchTerm) ||
                department.includes(searchTerm) ||
                designation.includes(searchTerm)) &&
              departmentMatch
            ) {
              row.style.display = "";
              hasResults = true;
            } else {
              row.style.display = "none";
            }
          });

          // Show/hide no results message
          document.getElementById("noResults").style.display = hasResults
            ? "none"
            : "block";
        });

      // Department filters
      document.querySelectorAll(".filter-badge").forEach((badge) => {
        badge.addEventListener("click", function () {
          // Remove active class from all filters
          document
            .querySelectorAll(".filter-badge")
            .forEach((b) => b.classList.remove("active"));

          // Add active class to clicked filter
          this.classList.add("active");

          const filter = this.dataset.filter;
          const rows = document.querySelectorAll("#facultyTableBody tr");
          let hasResults = false;

          rows.forEach((row) => {
            if (filter === "all" || row.dataset.department === filter) {
              row.style.display = "";
              hasResults = true;
            } else {
              row.style.display = "none";
            }
          });

          // Also apply current search term
          const searchTerm = document
            .getElementById("searchInput")
            .value.toLowerCase();
          if (searchTerm) {
            rows.forEach((row) => {
              if (row.style.display !== "none") {
                const name = row.children[0].textContent.toLowerCase();
                const department = row.children[1].textContent.toLowerCase();
                const designation = row.children[2].textContent.toLowerCase();

                if (
                  !(
                    name.includes(searchTerm) ||
                    department.includes(searchTerm) ||
                    designation.includes(searchTerm)
                  )
                ) {
                  row.style.display = "none";
                  hasResults = false;
                }
              }
            });
          }

          document.getElementById("noResults").style.display = hasResults
            ? "none"
            : "block";
        });
      });

      async function deleteFaculty(id, button) {
        try {
          const result = await Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to revert this!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#4158D0",
            cancelButtonColor: "#64748b",
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "Cancel",
            backdrop: `rgba(0,0,0,0.4)`,
            showClass: {
              popup: "animate__animated animate__fadeIn",
            },
            hideClass: {
              popup: "animate__animated animate__fadeOut",
            },
          });

          if (result.isConfirmed) {
            // Show loading indicator
            Swal.fire({
              title: "Deleting...",
              text: "Please wait while we delete the faculty member.",
              allowOutsideClick: false,
              didOpen: () => {
                Swal.showLoading();
              },
              backdrop: `rgba(0,0,0,0.4)`,
            });

            // Make API call to delete
            const response = await fetch(`/delete-faculty/${id}`, {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
              },
            });

            const data = await response.json();

            if (!response.ok) {
              throw new Error(data.message || "Failed to delete faculty");
            }

            // Remove the row with animation
            const row = button.closest("tr");
            row.style.transition = "all 0.5s ease";
            row.style.opacity = "0";
            row.style.transform = "translateX(20px)";

            setTimeout(() => {
              row.remove();

              // Check if there are any visible rows left
              const visibleRows = document.querySelectorAll(
                "#facultyTableBody tr[style='']"
              ).length;
              if (visibleRows === 0) {
                document.getElementById("noResults").style.display = "block";
              }
            }, 500);

            // Show success message
            Swal.fire({
              title: "Deleted!",
              text: "Faculty member has been deleted.",
              icon: "success",
              confirmButtonColor: "#4158D0",
              backdrop: `rgba(0,0,0,0.4)`,
            });
          }
        } catch (error) {
          console.error("Delete error:", error);
          Swal.fire({
            title: "Error!",
            text: error.message || "Failed to delete faculty",
            icon: "error",
            confirmButtonColor: "#4158D0",
            backdrop: `rgba(0,0,0,0.4)`,
          });
        }
      }

      function editFaculty(button) {
        const row = button.closest("tr");
        const id = row.dataset.id;
        const cells = row.children;

        // Get current values
        const currentData = {
          name: cells[0].textContent.trim(),
          department: cells[1].textContent.trim(),
          designation: cells[2].textContent.trim(),
          accessCode: cells[3].textContent.trim(),
          phone: cells[4].textContent.trim(),
        };

        // Create edit form HTML with modern styling
        const formHtml = `
            <form id="editForm" class="swal2-form">
                <div class="mb-3 position-relative">
                    <label class="form-label fw-bold text-start d-block">Name</label>
                    <input type="text" id="editName" class="form-control shadow-sm" 
                        value="${currentData.name}" 
                        required
                        style="border-radius: 12px; padding: 12px 15px; border: 2px solid #e2e8f0;">
                </div>
                
                <div class="mb-3">
                    <label class="form-label fw-bold text-start d-block">Department</label>
                    <select id="editDept" class="form-select shadow-sm"
                        style="border-radius: 12px; padding: 12px 15px; border: 2px solid #e2e8f0;">
                        ${["CSE", "IT", "SFE", "CE", "ME", "EEE", "EC"]
                          .map(
                            (dept) => `
                            <option value="${dept}" ${
                              dept === currentData.department ? "selected" : ""
                            }>
                                ${dept}
                            </option>
                        `
                          )
                          .join("")}
                    </select>
                </div>
                
                <div class="mb-3">
                    <label class="form-label fw-bold text-start d-block">Designation</label>
                    <select id="editDesignation" class="form-select shadow-sm"
                        style="border-radius: 12px; padding: 12px 15px; border: 2px solid #e2e8f0;">
                        ${[
                          "Placement Officer",
                          "HOD",
                          "Department Access",
                          "Other",
                        ]
                          .map(
                            (desig) => `
                            <option value="${desig}" ${
                              desig === currentData.designation
                                ? "selected"
                                : ""
                            }>
                                ${desig}
                            </option>
                        `
                          )
                          .join("")}
                    </select>
                </div>
                
                <div class="mb-3">
                    <label class="form-label fw-bold text-start d-block">Access Code</label>
                    <input type="text" id="editAccessCode" class="form-control shadow-sm" 
                        value="${currentData.accessCode}" 
                        required
                        style="border-radius: 12px; padding: 12px 15px; border: 2px solid #e2e8f0;">
                </div>
                
                <div class="mb-3">
                    <label class="form-label fw-bold text-start d-block">Phone</label>
                    <input type="tel" id="editPhone" class="form-control shadow-sm" 
                        value="${currentData.phone}" 
                        required
                        style="border-radius: 12px; padding: 12px 15px; border: 2px solid #e2e8f0;">
                </div>
            </form>
        `;

        Swal.fire({
          title: "Edit Faculty Member",
          html: formHtml,
          background: "#ffffff",
          showCancelButton: true,
          confirmButtonColor: "#4158D0",
          cancelButtonColor: "#64748b",
          confirmButtonText: '<i class="fas fa-save me-2"></i>Save Changes',
          cancelButtonText: "Cancel",
          focusConfirm: false,
          padding: "2rem",
          backdrop: `rgba(0,0,0,0.4)`,
          preConfirm: () => {
            return {
              name: document.getElementById("editName").value,
              department: document.getElementById("editDept").value,
              designation: document.getElementById("editDesignation").value,
              accessCode: document.getElementById("editAccessCode").value,
              phone: document.getElementById("editPhone").value,
            };
          },
        }).then(async (result) => {
          if (result.isConfirmed) {
            try {
              // Show loading state
              Swal.fire({
                title: "Saving changes...",
                text: "Please wait",
                allowOutsideClick: false,
                didOpen: () => {
                  Swal.showLoading();
                },
                backdrop: `rgba(0,0,0,0.4)`,
              });

              const response = await fetch(`/update-faculty/${id}`, {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(result.value),
              });

              const data = await response.json();

              if (!response.ok) {
                throw new Error(data.message || "Failed to update");
              }

              // Highlight the row briefly when updated
              row.style.transition = "background-color 1s ease";
              row.style.backgroundColor = "#f0fdf4";

              // Update table with animation
              cells[0].innerHTML = `<span class="status-indicator status-active"></span>${data.faculty.name}`;
              cells[1].textContent = data.faculty.department;
              cells[2].textContent = data.faculty.designation;
              cells[3].textContent = data.faculty.accessCode;
              cells[4].textContent = data.faculty.phone;

              // Update data attribute for filtering
              row.dataset.department = data.faculty.department;

              setTimeout(() => {
                row.style.backgroundColor = "";
              }, 2000);

              Swal.fire({
                title: "Updated!",
                text: "Faculty record has been updated successfully.",
                icon: "success",
                confirmButtonColor: "#4158D0",
                backdrop: `rgba(0,0,0,0.4)`,
              });
            } catch (error) {
              Swal.fire({
                title: "Error!",
                text: error.message || "Failed to update faculty",
                icon: "error",
                confirmButtonColor: "#4158D0",
                backdrop: `rgba(0,0,0,0.4)`,
              });
            }
          }
        });
      }

      // Add animation when the page loads
      document.addEventListener("DOMContentLoaded", function () {
        const rows = document.querySelectorAll("#facultyTableBody tr");
        rows.forEach((row, index) => {
          row.style.opacity = "0";
          row.style.transform = "translateY(20px)";
          row.style.transition = "opacity 0.3s ease, transform 0.3s ease";

          setTimeout(() => {
            row.style.opacity = "1";
            row.style.transform = "translateY(0)";
          }, 100 + index * 50);
        });
      });
    </script>
  </body>
</html>
